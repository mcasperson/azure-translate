jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: 5.x
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          additionalArguments: /overrideconfig mode=Mainline
      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octocli@v1.1.1
        with:
          version: latest
      - name: Set up JDK 1.11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: adopt
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set Version
        run: ./mvnw --batch-mode versions:set -DnewVersion=${{ steps.determine_version.outputs.semVer }}
        shell: bash
      - name: List Dependencies
        run: ./mvnw --batch-mode dependency:tree --no-transfer-progress > dependencies.txt
        shell: bash
      - name: Collect Dependencies
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies
          path: dependencies.txt
      - name: List Dependency Updates
        run: ./mvnw --batch-mode versions:display-dependency-updates > dependencyUpdates.txt
        shell: bash
      - name: Collect Dependency Updates
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies Updates
          path: dependencyUpdates.txt
      - name: Test
        run: ./mvnw --batch-mode -Dmaven.test.failure.ignore=true test
        shell: bash
      - if: always()
        name: Report
        uses: dorny/test-reporter@v1
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: 'false'
      - name: Package
        run: ./mvnw --batch-mode -DskipTests=true package
        shell: bash
      - id: get_artifact
        name: Get Artifact Path
        run: |-
          # Find the largest WAR or JAR, and assume that was what we intended to build.
          echo "::set-output name=artifact::$(find target -type f \( -iname \*.jar -o -iname \*.war \) -printf "%p\n" | sort -n | head -1)"
        shell: bash
      - id: get_artifact_name
        name: Get Artifact Name
        run: |-
          # Get the filename without a path
          path="${{ steps.get_artifact.outputs.artifact }}"
          echo "::set-output name=artifact::${path##*/}"
        shell: bash
      - name: Tag Release
        uses: mathieudutour/github-tag-action@v6.0
        with:
          custom_tag: ${{ steps.determine_version.outputs.semVer }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create_release
        name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
          release_name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
          draft: 'false'
          prerelease: 'false'
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_artifact.outputs.artifact }}
          asset_name: ${{ steps.get_artifact_name.outputs.artifact }}
          asset_content_type: application/octet-stream
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: mcasperson/translator:latest
name: Java Maven Build
'on':
  workflow_dispatch: {}
  push: {}
